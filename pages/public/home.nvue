<template>
	<div>
		<view class="swiper-container">
			<u-swiper height="210" :list="bannerList" radius="0" keyName="logo" @click="bannerClick" indicatorMode="line" :indicator="true" interval="5000" :circular="true"></u-swiper>
		</view>
		
		<view class="notice-bar-container">
			<u-notice-bar direction="column" duration="3000" @click="noticeClick" :text="noticeList"></u-notice-bar>
		</view>
		<u-gap height="10" bgColor="#F6F9FE"></u-gap>
		<view class="service-container">
			<u-grid :border="false">
				<u-grid-item v-for="(baseListItem, baseListIndex) in serviceTypeList" :key="baseListIndex" @click="click(baseListItem)">
					<u--image shape="circle" :showLoading="true" :src="baseListItem.picture" width="60px" height="60px"></u--image>
					<text class="grid-text">{{ baseListItem.name }}</text>
				</u-grid-item>
			</u-grid>
		</view>
		<u-gap height="10" bgColor="#F6F9FE" v-if="liveList.length>0"></u-gap>
		
		<view class="section_3 flex-col" v-if="liveList.length>0">
		  <view class="block_1 flex-row justify-between">
			<text class="text_2">企帮通直播</text>
			<view class="image-text_3 flex-row justify-between" @click="goUrl('pages/live/index', {})">
			  <u-icon name="arrow-right" label-pos="left" label="查看更多"></u-icon>
			</view>
		  </view>
		  <live-list :listData="liveList"></live-list>
		</view>
		<u-gap height="10" bgColor="#F6F9FE"></u-gap>
		<view class="section_4 flex-col">
		  <text class="text_3">服务项目</text>
		  <view class="grid_1 flex-row justify-between">
			<view
			  class="image-text_5 flex-col"
			  v-for="(item, index) in serviceListAll"
			  :key="index"
			  @click="goService(index)"
			>
			  <u--image :src="item.picture" width="80rpx" height="80rpx"></u--image>
			  <text class="text-group_5">{{ item.name }}</text>
			</view>
		  </view>
		</view>
		<u-gap height="10" bgColor="#F6F9FE"></u-gap>
		<u-sticky bgColor="#ffffff" zIndex="1">
		<u-tabs :list="serviceList" :inactiveStyle="{color: '#737D96'}" :activeStyle="{color: '#434E5E',fontWeight: 'bold'}" itemStyle="height:100rpx;font-size:32rpx;" lineColor="#F35917" lineWidth="30" @click="changeService" :current="current"></u-tabs></u-sticky>
		<view class="teacher-container" :style="{marginBottom: $u.util.isIphoneX() ? '128rpx' : '80rpx' }">
			<u-loading-icon :show="status=='loading'"></u-loading-icon>
			<teacher-list :serviceId="serviceId" :serviceName="serviceName" :listData="teacherList"></teacher-list>
			<u-loadmore :status="status" marginBottom="10"/>
		</view>
		
		<u-modal :show="show" :closeOnClickOverlay="true" title="温馨提示" :content="showContent" @close="show=false">
			<u-button slot="confirmButton" :text="confirmText" color="linear-gradient(270deg, #FFC37C 0%, #EE5929 100%);" shape="circle" @click="confirmClick">
			</u-button>
		</u-modal>
		<cu-tabbar :currentTab="0" :tabList="tabList"></cu-tabbar>
	</div>
</template>

<script>
	export default {
		options: { styleIsolation: 'shared' },
		data() {
			return {
				serviceId: 0,
				serviceName: '',
				show: false,
				confirmText: '去完善',
				showContent: '为了更好的提供服务，请您先完善用户信息',
				height: '130',
				showConfirm: false,
				title: '订阅消息提醒',
				content: '为了确保服务质量，请先订阅会议通知模板消息',
				status: 'loadmore',
				tabList: [
				],
				liveStatus: [],
				current: 0,
				currentNum: 0,
				liveList: [],
				teacherList: [
				],
				serviceList: [
				],
				serviceListAll: [
				],
				serviceTypeList: [
				],
				noticeList: [],
				bannerList: [
				],
				params: {
					page: 1,
					order: '',
					sort: '',
					type: '',
				}
			};
		},
		onShow() {
			if(this.vuex_token&&!this.vuex_user.mobile) {
				this.show = true;
			}
			this.teacherList = [];
			this.liveList = [];
			this.status = 'loadmore';
			this.params.page = 1;
			this.getHomeData()
			this.getLiveList();
			
			this.params.order = 'desc';
			this.params.sort = 'mark';
			this.getTeacherList();
		},
		created() {
			this.tabList = this.$configs.tabList;
		},
		onPullDownRefresh() {
			console.log('refresh');
			this.teacherList = [];
			this.liveList = [];
			this.getHomeData();
			this.getLiveList();
			this.status = 'loadmore';
			this.params.page = 1;
			this.params.order = 'desc';
			this.params.sort = 'mark';
			this.getTeacherList();
			setTimeout(function () {
				uni.stopPullDownRefresh();
			}, 1000);
		},
		onReachBottom() {
			if(this.status !== 'noMore') {
				this.status = 'loading';
				this.params.page++;
				this.getTeacherList()
			}
		},
		methods: {
			goService(index) {
				this.current = index+1;
				this.teacherList = [];
				this.status = 'loadmore';
				this.params.type = this.current;
				this.params.page = 1;
				this.params.sort = '';
				this.params.order = '';
				this.getTeacherList()
			},
			confirmClick() {
				this.show = false;
				uni.$u.route({
					url: '/pages/my/perfection'
				})
			},
			bannerClick(index) {
				for (var i = 0; i < this.bannerList.length; i++) {
					if(index==i) {
						if(this.bannerList[i].url) {
							uni.$u.route({
								url: this.bannerList[i].url
							})
						}
						break;
					}
				}
			},
			confirmMsg() {
				this.showConfirm = false;
				this.subcribeMsg();
			},
			subcribeMsg() {
				let that = this;
				let meeting_tmpl_id = that.vuex_base_config.meeting_tmpl_id;
				uni.requestSubscribeMessage({
				  tmplIds: [meeting_tmpl_id],
				  success (res) { 
					  if(res[meeting_tmpl_id]=='accept') {
						uni.$u.vuex('vuex_subscribe_meeting_msg', true);
					  }
					  else if(res[meeting_tmpl_id]=='reject'){
						uni.$u.util.showErr('您拒绝订阅消息，将会影响后续服务');
					  }
					  else if(res[meeting_tmpl_id]=='ban'){
						uni.$u.vuex('vuex_subscribe_meeting_msg', true);
						uni.$u.util.showErr('模板消息已被后台封禁');
					  }
					  console.log(res);
				  },
				  fail (err) {
					  uni.$u.util.showErr(err.errMsg);
				  }
				})
			},
			noticeClick(index) {
				console.log(index)
			},
			getHomeData() {
				let that=this;
				uni.$u.api.homeData().then(res=>{
					let arr = [ { id: 0, name: '推荐老师' } ];
					that.serviceListAll = res.data.serviceAllList;
					that.serviceList = arr.concat(res.data.serviceAllList);
					that.serviceTypeList = res.data.serviceTypeAllList;
					that.bannerList = res.data.bannerList
					that.noticeList = res.data.notice.map(item=>item.title);
					that.height = res.data.banner_height||'130';
					// uni.$u.vuex('vuex_base_config', res.data.baseConfig);
				})
				.catch(err=>{
					uni.hideLoading()
				})
			},
			changeService(e) {
				console.log(e);
				this.teacherList = [];
				this.status = 'loadmore';
				this.params.type = e.id;
				this.params.page = 1;
				this.serviceId = e.id;
				this.serviceName = e.name;
				if(e.id == 0) {
					this.params.sort = 'mark';
					this.params.order = 'desc';
				}
				else{
					this.params.sort = '';
					this.params.order = '';
				}
				this.getTeacherList()
			},
			getServiceList() {
				let that=this;
				uni.$u.api.serviceAll().then(res=>{
					console.log(res)
					let arr = [ { id: 0, name: '推荐' } ];
					that.serviceList = arr.concat(res.data)
				})
				.catch(err=>{
					uni.hideLoading()
				})
			},
			getServiceType() {
				let that=this;
				uni.$u.api.serviceTypeAll().then(res=>{
					console.log(res)
					that.serviceTypeList = res.data
				})
				.catch(err=>{
					uni.hideLoading()
				})
			},
			getTeacherList() {
				let that=this;
				uni.$u.api.teacherList({ params: that.params}).then(res=>{
					console.log(res)
					if(that.teacherList.length>0) {
						that.teacherList = that.teacherList.concat(res.data.data);
					}
					else {
						that.teacherList = res.data.data;
					}
					if(res.data.current_page == res.data.last_page) {
						that.status = 'noMore';
					}
					else {
						that.status = 'loadmore';
					}
				})
				.catch(err=>{
					uni.hideLoading()
				})
			},
			getLiveList() {
				let that=this;
				uni.$u.api.liveList({ params: {page: 1, limit: 20, from: 'home'}}).then(res=>{
					that.liveStatus = res.data.live_status;
					that.liveList = res.data.data;
				})
				.catch(err=>{
				})
			},
			click1(e) {
				console.log('click1', e);
			},
			goUrl(url, params) {
				uni.$u.route({
					url: url,
					params: params
				})
			},
			click(item) {
				uni.$u.route({
					url: '/pages/teacher/list',
					params: {
						type: item.id
					}
				})
			},
			scrolltolower() {
				this.loadmore()
			},

		}
	};
</script>

<style lang="scss" >
	.service-container {
		padding: 0 0 30rpx 0;
		.grid-text {
			margin-top: 8rpx;
		}
	}
	.teacher-container {
		padding: 0 30rpx 32rpx 30rpx;
		background-color: #F6F9FE;
	}
	
	.section_3 {
	    box-shadow: 0px 2px 10px 0px rgba(85, 112, 105, 0.1);
	    background-color: rgba(255, 255, 255, 1);
	    margin-top: -2rpx;
	    padding: 30rpx 30rpx 46rpx 30rpx;
	    .block_1 {
			margin-bottom: 30rpx;
	      .text_2 {
	        overflow-wrap: break-word;
	        color: rgba(67, 78, 94, 1);
	        font-size: 32rpx;
	        font-family: PingFangSC-Medium;
	        font-weight: bold;
	        text-align: left;
	        white-space: nowrap;
	        line-height: 44rpx;
	      }
	      .image-text_3 {
	        width: 152rpx;
	        margin: 2rpx 0 2rpx 0;
	        .text-group_3 {
	          overflow-wrap: break-word;
	          color: rgba(134, 142, 157, 1);
	          font-size: 28rpx;
	          font-family: PingFang-SC-Medium;
	          text-align: right;
	          white-space: nowrap;
	          line-height: 40rpx;
	        }
	        .thumbnail_4 {
	          width: 32rpx;
	          height: 32rpx;
	          margin: 4rpx 0 4rpx 0;
	        }
	      }
	    }
	  }
	  
	  
	  .section_4 {
	      box-shadow: 0px 2px 10px 0px rgba(85, 112, 105, 0.1);
	      background-color: rgba(255, 255, 255, 1);
	      padding: 30rpx 30rpx 0rpx 30rpx;
	      .text_3 {
	        overflow-wrap: break-word;
	        color: rgba(67, 78, 94, 1);
	        font-size: 32rpx;
	        font-family: PingFangSC-Medium;
	        font-weight: bold;
	        text-align: left;
	        white-space: nowrap;
	        line-height: 44rpx;
	        margin-bottom: 30rpx;
	      }
	      .grid_1 {
			  flex-wrap: wrap;
	        .image-text_5 {
	          margin-bottom: 40rpx;
			  width: 24%;
			  display: flex;
			  align-items: center;
	          .label_1 {
	            align-self: center;
	          }
	          .text-group_5 {
	            overflow-wrap: break-word;
	            color: rgba(125, 135, 155, 1);
	            font-size: 24rpx;
	            font-family: PingFang-SC-Medium;
	            text-align: center;
	            white-space: nowrap;
	            line-height: 34rpx;
	            margin-top: 14rpx;
	          }
	        }
			.image-text_5:not(:nth-child(4n)) {
			margin-right: calc(4% / 3);
			}
	      }
	    }
</style>
