<template>
	<view>
		<view class="pic-info">
			<button class="avatar-wrapper" open-type="chooseAvatar" plain="true" style="border: 0;" @chooseavatar="onChooseAvatar">
				<u-avatar :src="model.pic" size="70"></u-avatar>
			</button>
			<view class="nick-box" v-if="!isEdit" @click="isEdit=true"><u-icon labelPos="left" space="8" :label="model.nickname" name="edit-pen" size="20"></u-icon> </view>
			<u--input v-if="isEdit" @blur="isEdit=false" :clearable="true" inputAlign="center" style="max-width: 120rpx;" type="nickname" v-model="model.nickname" :focus="true" class="u-text-left" placeholder="请输入昵称" border='none'></u--input>
		</view>
		<u-gap height="10" bgColor="#efefef"></u-gap>
		<view class="perfection-box">
			<!-- 注意，如果需要兼容微信小程序，最好通过setRules方法设置rules规则 -->
			<u--form labelPosition="left" :model="model" ref="form" labelWidth="100">
				<u-form-item
					label="手机号"
					prop="mobile"
					ref="mobile"
				>
					<u--input v-if="hasPhone" disabledColor="#ffffff" inputAlign="right" v-model="model.mobile" :disabled="true" border='none'></u--input>
					<u-button v-if="!hasPhone" type="primary" size='small' open-type="getPhoneNumber" @getphonenumber="decryptPhoneNumber">获取手机号</u-button>
				</u-form-item>
				<u-form-item label="姓名" prop="username">
					<u--input placeholder="请输入姓名" v-model="model.username" inputAlign="right" border="none">
					</u--input>
				</u-form-item>
			</u--form>
		</view>
		<view class="bottom-button-box">
			<view class="bottom-button-group"><u-button type="primary" text="保存" @click="submit"></u-button></view>
			<u-safe-bottom></u-safe-bottom>
		</view>
	</view>
</template>

<script>
export default {
	data() {
		return {
			isEdit: false,
			hasPhone: false,
			model: {
				membe_id: 0,
				pic: '',
				nickname: '',
				username: '',
				mobile: '',
			},
			rules: {
			}
		};
	},
	created() {
		this.model.membe_id = this.vuex_user.membe_id;
		this.model.pic = this.vuex_user.pic;
		this.model.nickname = this.vuex_user.nickname;
		this.model.username = this.vuex_user.username;
		this.model.mobile = this.vuex_user.mobile;
	},
	methods: {
		decryptPhoneNumber(e) {
			console.log(e)
			if(e.detail.code) {
				uni.showLoading({
					title: '正在获取手机号'
				})
				uni.$u.api.getPhone({ code: e.detail.code }).then(res=>{
					console.log(res)
					this.model.mobile = res.data.mobile;
					this.hasPhone = true;
					uni.hideLoading()
				})
				.catch(err=>{
					uni.$u.util.showErr('手机号获取失败');
					uni.hideLoading()
				})
			}
		},
		onChooseAvatar(e) {
			console.log(this.vuex_user);
			let __this = this;
			const tempFilePaths = e.detail.avatarUrl;
			uni.uploadFile({
				url: __this.$configs.baseUrl + '/Upload/upload', //仅为示例，非真实的接口地址
				filePath: tempFilePaths,
				header: {
					token: __this.vuex_user.token,
					contentType: 'application/json'
				},
				name: 'file',
				formData: {
					modelFile: 'headimg'
				},
				success: uploadFileRes => {
					let data = uploadFileRes.data;
					data = JSON.parse(data);
					if(data.status == 200) {
						console.log(data)
						__this.model.pic = data.data;
					}
					else {
						uni.$u.util.showErr('头像上传失败');
					}
					// let userinfo = __this.vuex_user_info;
					// userinfo.imageUrl = data.data.httpUrl;
					// __this.$u.vuex('vuex_user_info', userinfo);
					// __this.$u.api.editUserInfo({ editType: 1, imageUrl: data.data.url }).then(val => {});
				},
				fail: err => {
					console.log(err);
					uni.$u.util.showErr('头像上传失败');
				}
			});
		},
		hideKeyboard() {
			uni.hideKeyboard();
		},
		submit() {
			let that=this;
			uni.$u.api.perfection(that.model).then(result=>{
				console.log(result)
				let user = that.vuex_user;
				user.mobile = that.model.mobile;
				user.nickname = that.model.nickname;
				user.username = that.model.username;
				user.pic = that.model.pic;
				uni.$u.vuex('vuex_user', user)
				uni.hideLoading()
				uni.showToast({
					title: result.msg,
					duration: 2000
				});
				setTimeout(()=>{
					uni.$u.route({
						type: 'reLaunch',
						url: '/pages/public/home'
					})
				}, 2000)
			})
			.catch(err=>{
				uni.hideLoading()
				uni.$u.util.showErr('保存失败');
			})
		},
	},
	onReady() {
		//如果需要兼容微信小程序，并且校验规则中含有方法等，只能通过setRules方法设置规则。
		this.$refs.form.setRules(this.rules);
	}
};
</script>

<style lang="scss">
.perfection-box {
	padding: 32rpx;
}
.pic-info {
	align-items: center;
	margin-top: 32rpx;
	margin-bottom: 48rpx;
	.nick-box {
		flex-direction: row;
		margin-top: 16rpx;
	}
}
.bottom-button-box {
	position: fixed;
	width: 100%;
	bottom: 0;
	left: 0;
	z-index: 999;
	background-color: #ffffff;
	.bottom-button-group {
		margin: 0 32rpx;
		flex-direction: row;
		.u-button--square {
			border-radius: 20rpx;
		}
	}
}
</style>
